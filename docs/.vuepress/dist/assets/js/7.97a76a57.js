(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{74:function(e,t,o){"use strict";o.r(t);var a=o(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Remember way back in high school, when your English teacher tried to engrave upon your memory the importance of appreciating 19th-century poetry? Or how about college, when you were encouraged to memorize the prologue of the Canterbury Tales so that you could enliven a cocktail party?")]),e._v(" "),o("blockquote",[o("p",[e._v("This actually happened for me, and it never fails to entertain - thank you, Professor Lynch!")])]),e._v(" "),o("p",[e._v("You may be a developer, an accountant, or a football player now, but it's never wrong to sit quietly and ponder the words carefully chosen by a poet who wanted to inspire you and make you think. To celebrate National Poetry Month in August, I built a mobile app that might help jog your memory about a poet that you might have forgotten, or never heard about, but someone who evokes strong feelings in many folks who hold good memories from their literature classes. Let's talk about Emily Dickinson.")]),e._v(" "),o("blockquote",[o("p",[e._v("Why a mobile app? Poetry is a great medium to consume on a mobile device. Often compact, these literary gems can fit on a small screen. You can also leverage a mobile device's hardware capabilities to enhance your experience, like taking a selfie or using the accelerometer. Also I like building mobile apps.")])]),e._v(" "),o("p",[e._v("Emily Dickinson was a poet active in the mid 19th century in Amherst, Western Massachusetts, on the East Coast of the USA. She was well known even in her life for being an eccentric recluse, sometimes only talking to visitors through closed doors. She was famous not so much for her poetry during her lifetime (much was published posthumously) but rather for her gardening.")]),e._v(" "),o("p",[e._v("How can we use new technology to bring the work of a 19th century poet back to our consciousness? In the eMiLy app, I designed an interface to encourage discovery, interaction, and creativity.")]),e._v(" "),o("ul",[o("li",[e._v("From a simple random query, discover a poem of the day from an obscure collection.")]),e._v(" "),o("li",[e._v("Use a slider to reflect the user's mood display a poem whose emotion correlates to the mood")]),e._v(" "),o("li",[e._v("Take a selfie, and display a correlating happy, sad, neutral or anxious poem")]),e._v(" "),o("li",[e._v("And finally, display poetry generated by a Recurrent Neural Network, based on Dickinson's literary work, to see if her meter and style can be imitated. Stay tuned for an explanation of this in a separate article.")])]),e._v(" "),o("p",[e._v("Building the eMiLy app allowed me to explore and dismantle the preconcieved notions about Dickinson's poetry that remained from school, id√©es fixes about her rhyme, meter, mood, and the themes that she touched in her poetry.")]),e._v(" "),o("h2",{attrs:{id:"scaffolding-a-mobile-app"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#scaffolding-a-mobile-app"}},[e._v("#")]),e._v(" Scaffolding a mobile app")]),e._v(" "),o("p",[e._v("My JavaScript framework of choice is Vue.js, and an excellent way to build a native mobile app using Vue is "),o("a",{attrs:{href:"http://www.nativescript-vue.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript-Vue"),o("OutboundLink")],1),e._v(". Community-built (thanks Igor!) it is supported by "),o("a",{attrs:{href:"http://progress.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Progress"),o("OutboundLink")],1),e._v("'s Open Source project, "),o("a",{attrs:{href:"http://nativescript.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("NativeScript"),o("OutboundLink")],1),e._v(". Install NativeScript on your local machine, following these "),o("a",{attrs:{href:"https://docs.nativescript.org/start/quick-setup",target:"_blank",rel:"noopener noreferrer"}},[e._v("instructions"),o("OutboundLink")],1),e._v("\nand use it from the command line:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("tns create my-new-app\n")])])]),o("p",[e._v("You'll be prompted to select your framework of choice and a basic layout.")]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/42/scaffold.gif",alt:"scaffolding the mobile app"}})]),e._v(" "),o("p",[e._v("I usually choose a blank layout, and then create custom tabs where my pages will be injected. Once scaffolded, you can start working in your editor of choice.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('//components/Home.vue\n\n<template>\n  <Page class="page" actionBarHidden="true">\n    <GridLayout rows="*,auto" columns="*">\n      \x3c!-- main components all on top of each other, since only 1 will be visible at any given time --\x3e\n      <component\n        v-for="component in componentsArray"\n        v-show="component === currentComponent"\n        :key="component"\n        :is="component"\n        row="0"\n        col="0"\n      />\n      <GridLayout row="1" col="0" rows="*" columns="*,*,*,*">\n        \x3c!-- Bottom navigation --\x3e\n        <StackLayout row="0" col="0" :class="navigationButtonClasses(\'DailyPoem\')">\n          <Image @tap="currentComponent = \'DailyPoem\'" src="~/assets/pencil.png" height="30" />\n        </StackLayout>\n\t\t\x3c!--more bottom navigation--\x3e\n      </GridLayout>\n    </GridLayout>\n  </Page>\n</template>\n\n<script>\nimport DailyPoem from "../components/DailyPoem";\nimport MyMood from "../components/MyMood";\nimport MoodSlider from "../components/MoodSlider";\nimport NewPoetry from "../components/NewPoetry";\n\nexport default {\n  data() {\n    return {\n      currentComponent: "DailyPoem",\n      componentsArray: ["DailyPoem", "MyMood", "MoodSlider", "NewPoetry"]\n    };\n  },\n  computed: {\n    navigationButtonClasses() {\n      return component => ({\n        "nav-btn": true,\n        colored: component === this.currentComponent\n      });\n    }\n  },\n\n  components: {\n    DailyPoem,\n    MyMood,\n    MoodSlider,\n    NewPoetry\n  }\n};\n<\/script>\n\n')])])]),o("p",[e._v("The Home.vue single-file component is the heart of this app; each page is loaded into this manufactured tab layout to be displayed. Assuming Xcode and/or Android Studio is installed on your local machine, you can also emulate the app as you build it; hot module replacement is available to you and speeds up the process:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("tns run ios/android\n")])])]),o("p",[e._v("With your tabs in place, your bottom navigation ready to go, and your pages ready, it's time to build out the four screens of this app.")]),e._v(" "),o("h2",{attrs:{id:"dickinson-data"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dickinson-data"}},[e._v("#")]),e._v(" Dickinson Data")]),e._v(" "),o("p",[e._v("The first question faced when building an app based on literature or art is always where to source data. Fortunately, a database of poems exists with over 300 Emily Dickinson poems (out of over 1800; she was a prolific writer). By exporting them in Json format, you can build a poem-of-the-day screen for your mobile app. On the first screen, I display a randomly-chosen poem out of the dataset that I exported from "),o("a",{attrs:{href:"http://poetrydb.org/author/Emily%20Dickinson",target:"_blank",rel:"noopener noreferrer"}},[e._v("poetrydb.org"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('//components/DailyPoem.vue\n\n<script>\nimport { mapActions, mapState } from "vuex";\n\nexport default {\n  computed: {\n    ...mapState(["poem"])\n  },\n  methods: {\n    ...mapActions(["getPoem"])\n  },\n  created() {\n    this.getPoem();\n  }\n};\n<\/script>\n')])])]),o("p",[e._v("Using Vuex, I'm able to control the app's state, showing a new poem on app refresh. You could change this to reflect the day, or even enhance the app to reflect seasonality. For now, I'm simply displaying a random poem from a group of 300 saved to Json, tidying up its format for display:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("//store/index.js - this is my Vuex store\n\ngetPoem({ commit }) {\n   let randomPoem = Math.floor(Math.random() * 300);\n   let poemObject = poetry[randomPoem];\n   let parsedPoem = JSON.stringify(poemObject.text);\n   let selectedPoem = parsedPoem.split(',').join('\\n');\n        commit('displayPoem', selectedPoem);\n}\n")])])]),o("p",[e._v("In the DailyPoem.vue's template block, then, I use NativeScript's XML-style markup to show the poem:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('<template>\n  <StackLayout>\n    <Label class="action-bar" text="Discover Emily Dickinson"></Label>\n    <ScrollView class="card">\n      <StackLayout>\n        <Label horizontalAlignment="center" textWrap="true" class="title">Welcome</Label>\n        <Image src="~/assets/logo.png" width="400px" />\n        <StackLayout class="inner-card">\n          <Label horizontalAlignment="center" textWrap="true" class="subtitle">My Daily Poem</Label>\n          <Label textWrap="true" :text="poem" />\n        </StackLayout>\n      </StackLayout>\n    </ScrollView>\n  </StackLayout>\n</template>\n')])])]),o("p",[e._v("This is the simplest use case for showing a random poem in a screen. The result looks like this:")]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/42/daily-poem.png",alt:"daily poem screen"}})]),e._v(" "),o("h2",{attrs:{id:"the-measure-of-mood"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#the-measure-of-mood"}},[e._v("#")]),e._v(" The Measure of Mood")]),e._v(" "),o("p",[e._v('Emily Dickinson\'s poetry seems to be best-known for being sad; if you ask a student about words that her poems evoke, you might hear "dark" or "gloomy". But was Emily\'s work universally sad? It\'s risky to try to evaluate the mental health of people long past their lifetime solely through their literary output, but it has been surmised that Emily might have suffered from '),o("a",{attrs:{href:"https://www.drmirkin.com/histories-and-mysteries/emily-dickinson-sad-poet-2.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("seasonal-affective disorder"),o("OutboundLink")],1),e._v(", given the wide variation of mood that her poetry evokes depending on whether it was written in winter or summer.")]),e._v(" "),o("p",[e._v("To help answer the question of whether Emily's work is predominantly sad or happy, I made use of a quick text-mining project I created in Azure Notebooks. You can fork this project and mine your own texts for most commonly-used words; if I run it in one of Azure's free colabs, I find that the most common word is:")]),e._v(" "),o("p",[e._v("(Can you guess it?)")]),e._v(" "),o("p",[e._v("LIKE")]),e._v(" "),o("p",[e._v("I believe that this is because Emily makes such frequent use of simile; the soul is like a flower, the heart is like the sun...")]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/42/text-mining.png",alt:"daily poem screen"}})]),e._v(" "),o("p",[e._v("Further analysis shows that she uses the word 'life' more often than 'death', and 'day' more often than 'night'. She draws heavily on natural imagery: 'summer', 'day', 'sun', 'nature', 'time', 'sea', 'flower', 'rose'. A little machine-aided text-mining helps to busting presuppositions about a poet's intention and overall mood.")]),e._v(" "),o("p",[e._v("Given that we now know that Emily's poetry ranges greatly in emotion, as do we ourselves, we can consider building an emotive experience for a mobile user based on her poems' sentiment. Let's display a happy or sad poem, based on the user's preference.")]),e._v(" "),o("p",[e._v("To do this, I built a slider - slide right for happy poems, slide left for sadder poems. But how can one tell which of Emily's poems are happy, and which are sad?")]),e._v(" "),o("p",[e._v("Microsoft cognitive services "),o("a",{attrs:{href:"https://azure.microsoft.com/en-us/services/cognitive-services/text-analytics/?WT.mc_id=jenloopercom-blog-jelooper",target:"_blank",rel:"noopener noreferrer"}},[e._v("text sentiment analysis"),o("OutboundLink")],1),e._v(" to the rescue!")]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/42/sentiment-analysis.png",alt:"Sentiment Service"}})]),e._v(" "),o("p",[e._v("Text can tell a lot about a user's sentiment. Designed for things like analyzing user feedback and restaurant reviews, the service can also be used - as I discovered - to get a measure of the sentiment of a given poem. Using the poetry that I had exported from poetrydb.com, I ran several poems through the service and saved the sentiment score to the Json object where I store the selection of poems used in the app.")]),e._v(" "),o("p",[e._v("Then, I built a slider for the user to manipulate:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('//components/MoodSlider.vue\n\n<Slider\n    borderWidth="5"\n    margin="5"\n    color="#00416a"\n    backgroundColor="#00416a"\n    minValue="0"\n    maxValue="1"\n    :value="value"\n    @valueChange="onValueChanged($event.value)"\n/>\n')])])]),o("p",[e._v("As the slider moves, the value to which it is bound also changes as does the color of the surrounding card:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('//components/MoodSlider.vue\n\nonValueChanged(e) {\n      this.showCard = true;\n      this.clearMoodPoem();\n      this.value = e.toFixed(2);\n      if (this.value < 0.5) {\n        this.moodClass = "inner-card blue";\n      } else {\n        this.moodClass = "inner-card rose";\n      }\n    },\n')])])]),o("p",[e._v("When the user taps a button, the Vuex store provides a poem with a similar sentiment score, based on the saved value in the Json dataset.")]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/42/slider.png",alt:"Sentiment Service"}})]),e._v(" "),o("h2",{attrs:{id:"the-enigmatic-face"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#the-enigmatic-face"}},[e._v("#")]),e._v(" The Enigmatic Face")]),e._v(" "),o("p",[e._v("To further personalize the project, what if someone could take a selfie, have the sentiment of the face analyzed, and have a poem matched to your mood as depicted by your face's expression? Once again, turning to Microsoft cognitive services, we have a nice solution handy. Rather than relying on pre-processed data, this time we will send an API call to Azure and get back information about a face's sentiment. To try this API, upload a photo "),o("a",{attrs:{href:"https://azure.microsoft.com/en-us/try/cognitive-services/my-apis/?api=face-api?WT.mc_id=jenloopercom-blog-jelooper",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("To get this working, you need a cognitive service setup for and a key to access the provided endpoint.")]),e._v(" "),o("p",[e._v("The user will snap a selfie:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('//components/MyMood.vue\n\nasync runFaceDetect() {\n      this.clearSelfiePoem();\n      this.complete = false;\n      const imageAsset = await takePicture({\n        width: 300,\n        height: 500,\n        keepAspectRatio: true,\n        saveToGallery: false,\n        cameraFacing: "front"\n      });\n      //process the asset\n      const filePath = await this.getFilePath(imageAsset);\n      const imageFile = File.fromPath(filePath);\n      this.selfie = imageAsset;\n      //send it to Azure\n      this.result = await this.sendRequest(imageFile);\n    },\n')])])]),o("p",[e._v("and then the image file will be sent to cognitive services where the Face API is queried for the "),o("code",[e._v("emotion")]),e._v(" facial attribute:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('//components/MyMood.vue\n\nsendRequest(file) {\n      return new Promise((resolve, reject) => {\n        const ses = session("image-upload");\n\n        const request = {\n          url:\n            "https://emilyemotions.cognitiveservices.azure.com/face/v1.0/detect?returnFaceLandmarks=false&returnFaceAttributes=emotion",\n          method: "POST",\n          headers: {\n            "Content-Type": "application/octet-stream",\n            "Ocp-Apim-Subscription-Key": "provided-key"\n          },\n          description: "Uploading " + file.name\n        };\n\n        ...\n      });\n    }\n')])])]),o("p",[e._v("The Face API returns an array of sentiments, and you can match the top returned value to the sentiments already saved in the .json dataset prior. Learn more about using the Face API "),o("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/cognitive-services/face/?WT.mc_id=jenloopercom-blog-jelooper",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/42/face.png",alt:"Sentiment Service"}})]),e._v(" "),o("p",[e._v("So far, the app shows a progression from displaying one poem through leveraging pre-processed sentiments to reading sentiments from users' faces and displaying a matching poem. In the next article, I'll discuss how I built the final screen of this app using poems generated by a Recurrent Neural Network, to see if it could detect, match and reproduce the 'ballad meter' often used by Dickinson. Stay tuned for the second part of this article series!")]),e._v(" "),o("p",[e._v("I hope that I've inspired you, if not to go back and read through Emily Dickinson's thought-provoking works, then perhaps to look through old literature and see how you can introduce it to new readers via the technology that we build every day. Find the assets for this work, including presentation slides and video and the full app codebase "),o("a",{attrs:{href:"https://github.com/jlooper/emily",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("Learn more about:\nü§≥ "),o("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/cognitive-services/face/?WT.mc_id=jenloopercom-blog-jelooper",target:"_blank",rel:"noopener noreferrer"}},[e._v("Face API"),o("OutboundLink")],1),e._v("\n‚úçÔ∏è "),o("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/index/?WT.mc_id=jenloopercom-blog-jelooper",target:"_blank",rel:"noopener noreferrer"}},[e._v("Text Analytics"),o("OutboundLink")],1),e._v("\nüë©üèª "),o("a",{attrs:{href:"https://en.wikipedia.org/wiki/Emily_Dickinson",target:"_blank",rel:"noopener noreferrer"}},[e._v("Emily Dickinson"),o("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);